generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id              String            @id @unique @default(uuid())
  name            String            @db.VarChar(99)
  UTC             Int               @default(5) @db.SmallInt
  StationSettings StationSettings[]
  users           User[]
}

model User {
  id             String             @id @unique @default(uuid())
  name           String             @db.VarChar(255)
  surname        String             @db.VarChar(255)
  patronymic     String             @db.VarChar(255)
  email          String             @unique
  phone          BigInt
  password       String
  verified       Boolean            @default(false)
  status         UserStatus
  client         UserClient
  role           UserRole
  auto_updating  Boolean            @default(true)
  auto_paying    Boolean            @default(true)
  get_push       Boolean            @default(true)
  get_email      Boolean            @default(true)
  hash_rst       String?            @db.VarChar(255)
  hash_vrf       String?            @db.VarChar(255)
  remainingTries Int                @default(0)
  token          String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  cityId         String
  contracts      Contract[]
  EventLog       EventLog[]
  metrics        Metric[]
  refreshTokens  RefreshToken[]
  Rooms          Rooms[]
  shelldues      Shelldue[]
  stations       Station[]
  city           City               @relation(fields: [cityId], references: [id])
  userGroups     UserToUserGroups[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id       String    @id @unique @default(uuid())
  number   String    @db.VarChar(255)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stations Station[]
}

model DeviceType {
  id                   String                 @id @unique @default(uuid())
  name                 String                 @db.VarChar(255)
  code                 String?                @unique
  DefaultScripts       DefaultScripts[]
  DeviceAtDeviceGroups DeviceAtDeviceGroups[]
  sensors              Sensor[]
  stations             Station[]
  versions             Version[]
}

model Version {
  id          String            @id @unique @default(uuid())
  fileUrl     String
  description String
  version     String            @db.VarChar(255)
  servFileUrl String            @default("")
  deviceId    String
  createdAt   DateTime          @default(now())
  sensors     SensorSettings[]
  stations    StationSettings[]
  device      DeviceType        @relation(fields: [deviceId], references: [id])
}

model Station {
  id         String                @id @unique @default(uuid())
  mac        String?               @db.VarChar(99)
  gatewayId  String?               @db.VarChar(99)
  deviceId   String
  contractId String?
  userId     String
  roomsId    String?
  EventLog   EventLog[]
  sensors    Sensor[]
  shelldues  ShellduesOnStations[]
  contract   Contract?             @relation(fields: [contractId], references: [id])
  device     DeviceType            @relation(fields: [deviceId], references: [id])
  Rooms      Rooms?                @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings   StationSettings?
}

model StationSettings {
  id        String  @id @unique @default(uuid())
  name      String  @db.VarChar(255)
  options   Json?
  stationId String  @unique
  versionId String
  cityId    String?
  City      City?   @relation(fields: [cityId], references: [id])
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  version   Version @relation(fields: [versionId], references: [id])
}

model Sensor {
  id        String          @id @unique @default(uuid())
  mac       String          @db.VarChar(99)
  elementId String?         @db.VarChar(99)
  charge    Int?
  uptime    BigInt?
  deviceId  String
  stationId String
  roomsId   String?
  data      Data[]
  EventLog  EventLog[]
  device    DeviceType      @relation(fields: [deviceId], references: [id])
  Rooms     Rooms?          @relation(fields: [roomsId], references: [id], onDelete: Cascade)
  station   Station         @relation(fields: [stationId], references: [id], onDelete: Cascade)
  settings  SensorSettings?
}

model SensorSettings {
  id         String    @id @unique @default(uuid())
  name       String    @db.VarChar(255)
  sleep      BigInt?   @default(10)
  alert      Boolean   @default(false)
  lost       Boolean   @default(false)
  triggerMin Float?
  triggerMax Float?
  schedule   Json?
  options    Json?
  pushStart  DateTime? @db.Time(6)
  pushEnd    DateTime? @db.Time(6)
  sensorId   String    @unique
  versionId  String
  sensor     Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  version    Version   @relation(fields: [versionId], references: [id])
}

model Data {
  id        String     @id @unique @default(uuid())
  value     Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  sensorId  String
  sensor    Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  EventLog  EventLog[]
}

model Activity {
  id     String   @id @unique @default(uuid())
  name   String
  metric Metric[]
}

model Metric {
  id         String   @id @unique @default(uuid())
  datetime   DateTime @default(now())
  activityId String
  userId     String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserGroups {
  id         String             @id @unique @default(uuid())
  name       String
  pushGroups UserToUserGroups[]
}

model UserToUserGroups {
  userGroupId String
  userId      String
  userGroup   UserGroups @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])

  @@id([userGroupId, userId])
}

model Shelldue {
  id             String                @id @unique @default(uuid())
  active         Boolean
  name           String
  hash           String?
  shelldueScript Json
  deviceTypes    String[]
  userId         String
  user           User                  @relation(fields: [userId], references: [id])
  stations       ShellduesOnStations[]
}

model ShellduesOnStations {
  id         String   @id @unique @default(uuid())
  shelldueId String
  stationId  String
  shelldue   Shelldue @relation(fields: [shelldueId], references: [id], onDelete: Cascade)
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model DefaultScripts {
  id          String     @id @unique
  deviceId    String
  script      Json
  description String?
  DeviceType  DeviceType @relation(fields: [deviceId], references: [id])
}

model DeviceAtDeviceGroups {
  deviceGroupsId String
  deviceId       String
  deviceGroups   deviceGroups @relation(fields: [deviceGroupsId], references: [id], onDelete: Cascade)
  DeviceType     DeviceType   @relation(fields: [deviceId], references: [id])

  @@id([deviceGroupsId, deviceId])
}

model EventCode {
  id          String     @id @unique
  description String
  code        Int        @unique
  EventLog    EventLog[]
}

model EventLog {
  id        String    @id @unique
  userId    String
  sensorId  String?
  stationId String?
  dataId    String?
  codeId    String
  EventCode EventCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Data      Data?     @relation(fields: [dataId], references: [id], onDelete: Cascade)
  Sensor    Sensor?   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  Station   Station?  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushMessage {
  id        String @id @unique
  title     String
  body      String
  condition String
  code      Int    @unique
}

model Rooms {
  id        String    @id @unique
  name      String    @db.VarChar(255)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sensor    Sensor[]
  Station   Station[]
}

model deviceGroups {
  id                   String                 @id @unique
  name                 String
  DeviceAtDeviceGroups DeviceAtDeviceGroups[]
}

enum UserStatus {
  active
  inactive
}

enum UserClient {
  bussiness
  person
  local
}

enum UserRole {
  administrator
  developer
  manager
  support
  user
}
